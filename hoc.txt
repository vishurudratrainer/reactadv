const TextComponent = ({ text }) => {
  const [isHovered, setHovered] = useState(false);

  function handleMouseEnter() {
    setHovered(true);
  }

  function handleMouseLeave() {
    setHovered(false);
  }

  return (
    <>
      <p
        style={{ backgroundColor: isHovered ? "blue" : "white" }}
        onMouseEnter={handleMouseEnter}
        onMouseLeave={handleMouseLeave}
      >
            { text }
      </p>
    </>
  );
};


/****************************/

// Higher Order Component that Contians the logic
// to detect the hover.
function withHover(WrappedComponent) {
  return function (props) {
    const [isHovered, setHovered] = useState(false);

    function handleMouseEnter() {
      setHovered(true);
    }

    function handleMouseLeave() {
      setHovered(false);
    }

    return (
      <div onMouseEnter={handleMouseEnter} onMouseLeave={handleMouseLeave}>
        <WrappedComponent {...props} isHovered={isHovered} />
      </div>
    );
  };
}

// Updated Text Component without the Hover Logic
const TextComponent = ({ text, isHovered }) => {
  return (
    <>
      <p style={{ backgroundColor: isHovered ? "blue" : "white" }}>{text}</p>
    </>
  );
};

// Updated Input Component without the Hover Logic
const InputComponent = ({ type, isHovered }) => {
  return (
    <input
      type={type}
      style={{ backgroundColor: isHovered ? "blue" : "white" }}
    />
  );
};

// Creating components that contain hover logic using
// Higher Order Component.
const TextComponentWithHover = withHover(TextComponent);
const InputComponentWithHover = withHover(InputComponent);

// Using the Components in our App
const App = () => {
  return (
    <div className="App">
      <TextComponentWithHover
        text="Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod
        tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim
        veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea
        commodo consequat."
      />

      <InputComponentWithHover type="text" />
    </div>
  );
};

export default App;

/*****************/

import "./styles.css";
import { useState, useEffect } from "react";

function withDataFetch(WrappedComponent, fetchData) {
  return function (props) {
    const [data, setData] = useState(null);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState(null);

    useEffect(() => {
      const fetchWrapper = async () => {
        try {
          const data = await fetchData(props);
          setData(data);
          setIsLoading(false);
        } catch (error) {
          setError(error);
          setIsLoading(false);
        }
      };
      fetchWrapper();
    }, [props]);

    return (
      <WrappedComponent
        {...props}
        data={data}
        isLoading={isLoading}
        error={error}
      />
    );
  };
}

const fetchPosts = async () => {
  const response = await fetch("https://jsonplaceholder.typicode.com/posts");
  const data = await response.json();
  return data;
};

const PostComponent = ({ data, isLoading, error }) => {
  if (isLoading) return <p>Loading...</p>;
  if (error) return <p>Error: {error.message}</p>;

  return (
    <ul>
      {data.map((item) => (
        <li key={item.id}>{item.title}</li>
      ))}
    </ul>
  );
};

const PostComponentWithData = withDataFetch(PostComponent, fetchPosts);

export default function App() {
  return (
    <div className="App">
      <PostComponentWithData />
    </div>
  );
}

/****************/

import "./styles.css";

// Higher Order Component
function withAuthorization(WrappedComponent, checkPermissions) {
  return function (props) {
    // You can also wrap it in useEffect for async permission checks.
    return checkPermissions(props) ? (
      <WrappedComponent {...props} />
    ) : (
      <p>Please login with appropriate role</p>
    );
  };
}

const PrivateComponent = () => {
  return <div>This is a Private Component, only visible to Admin Users.</div>;
};

const checkPermission = (props) => {
  return props.userRole === "admin";
};

const PrivateComponentComponentWithAuthorization = withAuthorization(
  PrivateComponent,
  checkPermission
);

export default function App() {
  return (
    <div className="App">
      <PrivateComponentComponentWithAuthorization userRole="admin" />

      <PrivateComponentComponentWithAuthorization userRole="guest" />
    </div>
  );
}

/************************/

mport "./styles.css";
import React from "react";

function withFeatureToggle(WrappedComponent, featureEnabled) {
  return function (props) {
    return featureEnabled ? <WrappedComponent {...props} /> : <></>;
  };
}

const NewFeatureComponent = () => {
  return (
    <div>
      <button>New Feature</button>
    </div>
  );
};

// Global Feature Toggle.
const enableNewFeatures = false;

const NewFeatureComponentWithFeatureToggle = withFeatureToggle(
  NewFeatureComponent,
  enableNewFeatures
);

export default function App() {
  return (
    <div className="App">
      <NewFeatureComponentWithFeatureToggle />
    </div>
  );
}

/*************************/

import "./styles.css";

import React, { useState } from 'react';

const i18n = {
  en: {
    "Please Login": 'Please Login',
  },
  es: {
    "Please Login": 'Por favor Iniciar sesión',
  },
  fr: {
    "Please Login": 'Veuillez vous connecter'
  }
};

function withTranslation(WrappedComponent, translation) {
  return function (props) {
    const [language, setLanguage] = useState('en');

    const translate = (key) => translation[language][key] || key;

    const changeLanguage = (lang) => {
      setLanguage(lang);
    };

    return (
      <WrappedComponent
        {...props}
        t={translate}
        language={language}
        changeLanguage={changeLanguage}
      />
    );
  };
}


const LoginComponent = ({ t, language, changeLanguage }) => {
  return (
    <div>
      <p>{t('Please Login')}</p>
      <p>Current language: {language}</p>
      <button onClick={() => changeLanguage('en')}>English</button>
      <button onClick={() => changeLanguage('es')}>Español</button>
      <button onClick={() => changeLanguage('fr')}>Français</button>

    </div>
  );
};

const LoginComponentWithTranslation = withTranslation(LoginComponent, i18n);


export default function App() {
  return (
    <div className="App">
    <LoginComponentWithTranslation />
    </div>
  );
}

/****************************/

import React, { Component } from "react";

function withErrorBoundary(WrappedComponent) {
  return class ErrorBoundary extends Component {
    constructor(props) {
      super(props);
      this.state = { hasError: false, error: null };
    }

    static getDerivedStateFromError(error) {
      return { hasError: true, error };
    }

    componentDidCatch(error, errorInfo) {
      console.error("Error handled by ErrorBoundary:", error, errorInfo);
    }

    render() {
      if (this.state.hasError) {
        return <p>Something went wrong: {this.state.error.message}</p>;
      }

      return <WrappedComponent {...this.props} />;
    }
  };
}

const DataViewerComponent = ({ data }) => {
  if (!data) {
    throw new Error("Please specify the data");
  }

  return (
    <div>
      <h2>Data:</h2>
      {data}
    </div>
  );
};

const DataViewerWithErrorBoundary = withErrorBoundary(DataViewerComponent);

export default function App() {
  return (
    <div className="App">
      <DataViewerWithErrorBoundary />
    </div>
  );
}